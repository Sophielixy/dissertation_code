import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import matplotlib.ticker as ticker
import statsmodels.api as sm
import seaborn as sns

# --------------Part 1:  Import data  ----------------------------------------
sales_data = pd.read_excel("D:/Warwick/dissertation/Original_Data/2021-09-06 MASTER DASHBOARD_PreMeet.xlsm",
                           sheet_name='Data')
# print(sales_data)
sales_data = sales_data[sales_data['Status'] == 'PAID']  # Only considering paid orders
sales_data = sales_data[sales_data['Country'] == 'United Kingdom']  # Only considering UK orders
# remove orders that are not generated by Happy Linen Company
sales_data = sales_data[sales_data['Sub-source'] != 'Laika Designs']
sales_data = sales_data[sales_data['Sub-source'] != 'https://happylinencompany.co.uk']
current_date = sales_data.loc[sales_data.index[-1]]['Received Date']  # date of recent sales order
start_date = sales_data.loc[sales_data.index[0]]['Received Date']  # date of the first sales order
SKU_selected = 'DINOSNORE-HL01-SIN'
ProductRange_selected = 'Dinosnore'
# ----------------------- Part 2: Sales Quantity  -----------------------------
# sum up all the quantities with same received date
# for all SKUs
sales_qty = sales_data['Quantity'].groupby(sales_data['Received Date']).sum()
# for product range dinosnore
rangedinosnore_sales_data = sales_data[sales_data['Product Range2'] == ProductRange_selected]
rangedinosnore_sales_qty = rangedinosnore_sales_data['Quantity'].groupby(sales_data['Received Date']).sum()
# for SKU DINOSNORE-HL01-SIN
DINOSIN_sales_data = sales_data[sales_data['Main SKU'] == SKU_selected]
DINOSIN_sales_qty = DINOSIN_sales_data['Quantity'].groupby(DINOSIN_sales_data['Received Date']).sum()

# Plot of sales quantity for all SKUs
fig, ax = plt.subplots(1, 1, figsize=(15, 7))
ax.plot(sales_qty, label='all SKUs', color='black')
plt.gcf().autofmt_xdate()
plt.xticks(fontsize=10)
plt.title('Sales Quantity', fontsize=20)
tick_spacing = 40
ax.legend(fontsize=10, loc='upper left')
ax.xaxis.set_major_locator(ticker.MultipleLocator(tick_spacing))

# Plot of sales quantity for product range dinosnore and DINOSNORE-HL01-SIN
fig, ax = plt.subplots(1, 1, figsize=(15, 7))
ax.plot(rangedinosnore_sales_qty, color='red', label=ProductRange_selected)
ax.plot(DINOSIN_sales_qty, color='green', label=SKU_selected)
plt.gcf().autofmt_xdate()
plt.xticks(fontsize=10)
plt.title('Sales Quantity', fontsize=20)
tick_spacing = 40
ax.xaxis.set_major_locator(ticker.MultipleLocator(tick_spacing))
plt.legend(fontsize=10)

# ----------------------- Part 3:Sales Revenue  -----------------------------
sales_rev = sales_data['Transaction GBP'].groupby(sales_data['Received Date']).sum()
rangedinosnore_sales_rev = rangedinosnore_sales_data['Transaction GBP'].groupby(sales_data['Received Date']).sum()
DINOSIN_sales_rev = DINOSIN_sales_data['Transaction GBP'].groupby(DINOSIN_sales_data['Received Date']).sum()

# Plot of sales revenue for all SKUs
fig, ax = plt.subplots(1, 1, figsize=(15, 7))
ax.plot(sales_rev, label='all SKUs', color='black')
plt.gcf().autofmt_xdate()
plt.xticks(fontsize=10)
plt.title('Sales Revenue', fontsize=20)
tick_spacing = 40
ax.xaxis.set_major_locator(ticker.MultipleLocator(tick_spacing))
ax.legend(fontsize=10, loc='upper left')
# plt.show()
# plt.savefig('Sales_Revenue')

# Plot of sales revenue for product range dinosnore and DINOSNORE-HL01-SIN
fig, ax = plt.subplots(1, 1, figsize=(15, 7))
ax.plot(rangedinosnore_sales_rev, color='red', label=ProductRange_selected)
ax.plot(DINOSIN_sales_rev, color='green', label=SKU_selected)
plt.gcf().autofmt_xdate()
plt.xticks(fontsize=10)
plt.title('Sales Revenue', fontsize=20)
tick_spacing = 40
ax.xaxis.set_major_locator(ticker.MultipleLocator(tick_spacing))
plt.legend(fontsize=10)

# ---------- Part 4: Sales Revenue of Different Channels -------------------
# date range from the beginning to the current date
fulldates = pd.date_range(start=start_date, end=current_date, freq='7D')


def rev_channels(df):
    # This function is to plot sales revenue in different channels
    # There are six channels
    # sum up sales revenues with same date for each channel
    df_amazon, df_amazonFBA, df_direct, df_ebay, df_etsy, df_shopify = df.groupby(df['Source'])
    df_amazon_rev = df_amazon[1]['Transaction GBP'].groupby(df_amazon[1]['Received Date']).sum()
    df_amazonFBA_rev = df_amazonFBA[1]['Transaction GBP'].groupby(df_amazonFBA[1]['Received Date']).sum()
    df_direct_rev = df_direct[1]['Transaction GBP'].groupby(df_direct[1]['Received Date']).sum()
    df_ebay_rev = df_ebay[1]['Transaction GBP'].groupby(df_ebay[1]['Received Date']).sum()
    df_etsy_rev = df_etsy[1]['Transaction GBP'].groupby(df_etsy[1]['Received Date']).sum()
    df_shopify_rev = df_shopify[1]['Transaction GBP'].groupby(df_shopify[1]['Received Date']).sum()

    # if there is no sales revenue on that date, fill with value 0
    fulldates_salesrev_Amazon = df_amazon_rev.reindex(fulldates, fill_value=0)
    fulldates_salesrev_AmazonFBA = df_amazonFBA_rev.reindex(fulldates, fill_value=0)
    fulldates_salesrev_Direct = df_direct_rev.reindex(fulldates, fill_value=0)
    fulldates_salesrev_Ebay = df_ebay_rev.reindex(fulldates, fill_value=0)
    fulldates_salesrev_Etsy = df_etsy_rev.reindex(fulldates, fill_value=0)
    fulldates_salesrev_Shopify = df_shopify_rev.reindex(fulldates, fill_value=0)

    # stackplot of sales revenue in different channels
    # different color areas means different channels
    channels_label = ['Amazon', 'AmazonFBA', 'Direct', 'Ebay', 'Etsy', 'Shopify']
    colors_channels = ['orange', 'navy', 'green', 'gray', 'gold', 'violet']
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y - %d/%m/%Y'))
    plt.gca().xaxis.set_major_locator(mdates.DayLocator())
    tick_spacing_2 = 40
    fig, ax = plt.subplots(1, 1)
    ax.stackplot(fulldates,  # x axis
                 fulldates_salesrev_Amazon, fulldates_salesrev_AmazonFBA,
                 fulldates_salesrev_Direct, fulldates_salesrev_Ebay, fulldates_salesrev_Etsy,
                 fulldates_salesrev_Shopify,
                 labels=channels_label,
                 colors=colors_channels
                 )
    ax.xaxis.set_major_locator(ticker.MultipleLocator(tick_spacing_2))
    plt.gcf().autofmt_xdate()
    plt.xticks(fontsize=8)
    plt.title('Sales Revenue of each Channel')
    plt.tick_params(top='off', right='off')
    plt.legend(loc='upper left')
    plt.show()


rev_channels(sales_data)  # plot for all SKUs
rev_channels(DINOSIN_sales_data)  # plot for DINOSNORE-HL01-SIN

# -----------------------Part 5: Prices trend & Sales quantity-----------------------------
# Import price data
prices = pd.read_excel("D:/Warwick/dissertation/Original_Data/2021-09-06 MASTER DASHBOARD_PreMeet.xlsm",
                       sheet_name='Price Data', skiprows=1)
DINOSIN_prices = prices[prices['SKU'] == SKU_selected]  # Prices of DINOSNORE-HL01-SIN


def price_trend(channel):
    # price trend of different channels
    prices_channel = DINOSIN_prices[DINOSIN_prices['Channel'] == channel]
    prices_channel.set_index(["Date"], inplace=True)
    fulldates_prices_trend= prices_channel.reindex(fulldates, fill_value=0)['Price']

    return fulldates_prices_trend

fulldates_prices_trend_Amazon = price_trend('Amazon')
fulldates_prices_trend_Shopify = price_trend('Shopify')
fulldates_prices_trend_eBay = price_trend('eBay')

# sum up sales revenues with same date for each channel
df_amazon, df_amazonFBA, df_direct, df_ebay, df_etsy, df_shopify = DINOSIN_sales_data.groupby(DINOSIN_sales_data['Source'])
df_amazon_qty = df_amazon[1]['Quantity'].groupby(df_amazon[1]['Received Date']).sum()
df_amazonFBA_qty = df_amazonFBA[1]['Quantity'].groupby(df_amazonFBA[1]['Received Date']).sum()
df_ebay_qty = df_ebay[1]['Quantity'].groupby(df_ebay[1]['Received Date']).sum()
df_shopify_qty = df_shopify[1]['Quantity'].groupby(df_shopify[1]['Received Date']).sum()

fulldates_DINOSIN_salesqty_Amazon = df_amazon_qty.reindex(fulldates, fill_value=0)
fulldates_DINOSIN_salesqty_AmazonFBA = df_amazonFBA_qty.reindex(fulldates, fill_value=0)
fulldates_DINOSIN_salesqty_Ebay = df_ebay_qty.reindex(fulldates, fill_value=0)
fulldates_DINOSIN_salesqty_Shopify = df_shopify_qty.reindex(fulldates, fill_value=0)

tick_spacing = 20
fig2, [ax1, ax3, ax5] = plt.subplots(nrows=3, ncols=1)
plt.subplots_adjust(wspace=0, hspace=1)
# sales quantity of Amazon and Amazon FBA
ax1.stackplot(fulldates, fulldates_DINOSIN_salesqty_Amazon + fulldates_DINOSIN_salesqty_AmazonFBA)
ax1.set_title('Sales Quantity of SKU on Amazon(including Amazon FBA)', fontsize=10)
ax1.xaxis.set_major_locator(ticker.MultipleLocator(tick_spacing))
ax1.xaxis.set_tick_params(rotation=45, labelsize=8)
# price trend of Amazon
ax2 = ax1.twinx()
ax2.set_ylim(10, 22)
ax2.plot(fulldates, fulldates_prices_trend_Amazon, 'r', label='Price')
ax2.set_ylabel('price')
plt.legend()

# sales quantity of Shopify
ax3.stackplot(fulldates, fulldates_DINOSIN_salesqty_Shopify)
ax3.set_title('Sales Quantity of SKU on Shopify', fontsize=10)
ax3.xaxis.set_major_locator(ticker.MultipleLocator(10))
ax3.xaxis.set_tick_params(rotation=45, labelsize=8)
# price trend of Shopify
ax4 = ax3.twinx()
ax4.set_ylim(10, 22)
ax4.plot(fulldates, fulldates_prices_trend_Shopify, 'r', label='Price')
ax4.set_ylabel('price')
plt.legend()

# sales quantity of eBay
ax5.stackplot(fulldates, fulldates_DINOSIN_salesqty_Ebay)
ax5.set_title('Sales Quantity of SKU on Ebay', fontsize=10)
ax5.xaxis.set_major_locator(ticker.MultipleLocator(tick_spacing))
ax5.xaxis.set_tick_params(rotation=45, labelsize=8)
# price trend of eBay
ax6 = ax5.twinx()
ax6.set_ylim(10, 22)
ax6.plot(fulldates, fulldates_prices_trend_eBay, 'r', label='Price')
ax6.set_ylabel('price')

plt.suptitle('Sales Quantity and Price trend of different Channels')
plt.legend()
plt.savefig('Price_trends_channels')